{#
    Generate trampoline classes to be used for two purposes:

    * Allow python programs to override virtual functions
    * Allow python programs access to protected members

    This trampoline is used from two different places:
    - To generate a trampoline usable by the class itself
    - Generate a trampoline usable by child classes

    Sometimes these are the same trampoline. The exception is when
    a 'final' method is in the base class, then a separate

    Each trampoline type is placed in a different namespace
    to make our life easier.

    Trampoline functions can be disabled via RPY_DISABLE_name_[type_type..]
#}

{%- macro precomma(v) -%}
  {%- if v %}, {{ v }}{%- endif -%}
{%- endmacro -%}

{%- macro postcomma(v) -%}
  {%- if v %}{{ v }}, {% endif -%}
{%- endmacro -%}

{# delete any finals #}
{% for fn in cls.methods.public + cls.methods.protected if fn.final %}
#define RPYGEN_DISABLE_{{ trampoline_signature(fn) }}
{% endfor %}

{# include override files for each base -- TODO: exclude some bases? #}
{% if cls.bases %}
{% for base in cls.bases %}
#include <rpygen/{{ base.full_cpp_name_identifier }}.hpp>
{% endfor %}
{% endif %}

namespace rpygen {

{% if cls.namespace %}
using namespace {{ cls.namespace }};
{% endif %}

{% for decl in using_declarations %}
using {{ decl }};
{% endfor %}

{#
    Each trampoline has a configuration struct.

    - Stores the base class that the trampoline is wrapping
    - Provides a mechanism to detect which base class to use when calling an
      overloaded virtual function (each class defines the overloads they have,
      and so if it's not defined in this config, then it falls back to the
      parent configuration)
#}
{% if cls.bases %}
template <{{ postcomma(cls.pybase_params) }}typename CfgBase>
using PyTrampolineCfgBase_{{ cls.full_cpp_name_identifier }} =
{% for base in cls.bases %}
    PyTrampolineCfg_{{ base.full_cpp_name_identifier }}<{{ postcomma(base.template_params) }}
{% endfor %}
CfgBase
{% for base in cls.bases %}>{% endfor %};
{% endif %}

template <{{ postcomma(cls.template_parameter_list) }}typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_{{ cls.full_cpp_name_identifier }} :
{% if cls.bases %}
    PyTrampolineCfgBase_{{ cls.full_cpp_name_identifier }}<{{ postcomma(cls.pybase_args) }} CfgBase>
{% else %}
    CfgBase
{% endif %}
{
    using Base = {{ cls.full_cpp_name }};

    {# specify base class to use for each virtual function #}
    {% for fn in cls.virtual_methods %}
    using override_base_{{ trampoline_signature(fn) }} = {{ cls.full_cpp_name }};
    {% endfor %}
};


{% if cls.bases %}
{#
    To avoid multiple inheritance here, we define a single base with bases that
    are all template bases..

    PyTrampolineBase is another trampoline or our base class
#}
template <typename PyTrampolineBase{{ precomma(cls.pybase_params) }}, typename PyTrampolineCfg>
using PyTrampolineBase_{{ cls.full_cpp_name_identifier }} =
{% for base in cls.bases %}
    PyTrampoline_{{ base.full_cpp_name_identifier }}<
{% endfor %}
        PyTrampolineBase
{% for base in (cls.bases | reverse) %}
        {{ precomma(base.template_params) }}
        , PyTrampolineCfg
    >
{% endfor %}
;

template <typename PyTrampolineBase{{ precomma(cls.template_parameter_list) }}, typename PyTrampolineCfg>
struct PyTrampoline_{{ cls.full_cpp_name_identifier }} : PyTrampolineBase_{{ cls.full_cpp_name_identifier }}<PyTrampolineBase{{ precomma(cls.pybase_args) }}, PyTrampolineCfg> {
    using PyTrampolineBase_{{ cls.full_cpp_name_identifier }}<PyTrampolineBase{{ precomma(cls.pybase_args) }}, PyTrampolineCfg>::PyTrampolineBase_{{ cls.full_cpp_name_identifier }};
{% else %}
template <typename PyTrampolineBase{{ precomma(cls.template_parameter_list) }}, typename PyTrampolineCfg>
struct PyTrampoline_{{ cls.full_cpp_name_identifier }} : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;
{% endif %}

{% for typealias in cls.user_typealias %}
    {{ typealias }};
{% endfor %}
{% for typealias in cls.auto_typealias %}
    {{ typealias }};
{% endfor %}
{% for name, constant in cls.constants %}
    static constexpr auto {{ name }} = {{ constant }};
{% endfor %}

{# protected constructors -- only used by the direct child #}
{% for fn in cls.protected_constructors %}
#ifdef RPYGEN_ENABLE_{{ cls.full_cpp_name_identifier }}_PROTECTED_CONSTRUCTORS
    PyTrampoline_{{ cls.full_cpp_name_identifier }}({{ fn.parameters | join(', ', attribute='decl') }}) :
        {% if cls.bases -%}
             PyTrampolineBase_{{ cls.full_cpp_name_identifier }}<PyTrampolineBase{{ precomma(cls.pybase_args) }}, PyTrampolineCfg>
        {%- else -%}
            PyTrampolineBase
        {%- endif -%}
        ({{ fn.parameters | join(', ', attribute='call_name') }})
    {}
#endif
{% endfor %}

    {# virtual methods (disabled for buffer overrides for now) #}
    {% for fn in cls.virtual_methods %}
#ifndef RPYGEN_DISABLE_{{ trampoline_signature(fn) }}
    {{ fn.cpp_return_type }} {{ fn.cpp_name }}({{ fn.parameters | join(', ', attribute='decl') }})
    {%- if fn.const %} const{% endif -%}
    {{ fn.ref_qualifiers }} override {
    {% if fn.trampoline_cpp_code %}
    {{ fn.trampoline_cpp_code }}
    {% else %}
    {# TODO: probably will break for things like out parameters, etc #}
    {% if fn.ignore_pure %}
        throw std::runtime_error("not implemented");
    {% else %}
    {% if fn.virtual_xform %}
        auto custom_fn = {{ fn.virtual_xform }};
    {% endif %}
        using LookupBase = typename PyTrampolineCfg::Base;
    {#
        We define a "LookupBase" and "CallBase" here because to find the python
        override we need to use the actual class currently being overridden, but
        to make the actual call we might need to use a base class.

        .. lots of duplication here, but it's worse without it
    #}
    {% if fn.pure_virtual and fn.virtual_xform %}
        RPYBUILD_OVERRIDE_PURE_CUSTOM_NAME({{ cls.name }}, PYBIND11_TYPE({{ fn.rtnType }}), LookupBase,
            "{{ fn.py_name }}", {{ fn.cpp_name }}, {{ fn.parameters | join(', ', attribute='name') }});
    {% elif fn.pure_virtual %}
        RPYBUILD_OVERRIDE_PURE_NAME({{ cls.name }}, PYBIND11_TYPE({{ fn.rtnType }}), LookupBase,
            "{{ fn.py_name }}", {{ fn.cpp_name }}, {{ fn.parameters | join(', ', attribute='name') }});
    {% elif fn.virtual_xform %}
        using CxxCallBase = typename PyTrampolineCfg::override_base_{{ trampoline_signature(fn) }};
        RPYBUILD_OVERRIDE_CUSTOM_IMPL(PYBIND11_TYPE({{ fn.rtnType }}), LookupBase,
            "{{ fn.py_name }}", {{ fn.cpp_name }}, {{ fn.parameters | join(', ', attribute='name') }});
        return CxxCallBase::{{ fn.cpp_name }}({{ fn.parameters | join(', ', attribute='x_virtual_callname') }});
    {% else %}
        using CxxCallBase = typename PyTrampolineCfg::override_base_{{ trampoline_signature(fn) }};
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE({{ fn.rtnType }}), LookupBase,
            "{{ fn.py_name }}", {{ fn.parameters | join(', ', attribute='name') }});
        return CxxCallBase::{{ fn.cpp_name }}({{ fn.parameters | join(', ', attribute='x_virtual_callname') }});
    {% endif %}
    {% endif %}
    {% endif %}
    }
#endif

    {% endfor %}

    {# non-virtual protected methods/attributes #}
    {% for fn in cls.non_virtual_protected_methods %}
#ifndef RPYBLD_DISABLE_{{ trampoline_signature(fn) }}
{# hack to ensure we don't do 'using' twice' in the same class, while
   also ensuring that the overrides can be selectively disabled by
   child trampoline functions #}
  #ifndef RPYBLD_UDISABLE_{{ using_signature(fn) }}
    using {{ cls.full_cpp_name }}::{{ fn.cpp_name }};
    #define RPYBLD_UDISABLE_{{ using_signature(fn) }}
  #endif
#endif
    {% endfor %}

    {% for prop in cls.protected_properties %}
    using {{ cls.full_cpp_name }}::{{ prop.name }};
    {% endfor %}

    {% if cls.trampoline_inline_code %}
    {{ cls.trampoline_inline_code }}
    {% endif %}
};

}; // namespace rpygen
