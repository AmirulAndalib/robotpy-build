{# 
    Class fields (tmplcontext.FieldContext)
#}

{% import "doc_macros.cpp.j2" as docm %}

{%- macro cls_field(cls_qualname, field) -%}
  .def_property_
    {%- if field.readonly %}readonly{% else %}readwrite{%- endif -%}
    {%- if field.static -%}_static{%- endif -%}
  ("{{ field.py_name }}",

  {%- if field.array_size %}
    []({{ cls_qualname }}& inst) {
        return py::memoryview::from_buffer(
          &inst.{{ field.cpp_name }}, sizeof({{ field.cpp_type }}),
          py::format_descriptor<{{ field.cpp_type }}>::value,
          {{ "{" }}{{ prop.array_size }}{{ "}" }}, {sizeof({{ field.cpp_type }})},
          {% if field.readonly %}true{% else %}false{% endif %}
        );
    }
  {% elif field.reference %}
    [](const {{ cls_qualname }}& inst) -> {{ field.cpp_type }} { return inst.{{ field.cpp_name }}; }
    {%- if not field.readonly %},
    []({{ cls_qualname }}& inst, {{ field.cpp_type }} v) {inst.{{ field.cpp_name }} = v; }
    {%- endif %}
  {% else -%}
    &{{ cls_qualname }}::{{ prop.name}}
  {%- endif -%}
  {{- docm.doc_arg(field) }})
{%- endmacro -%}
