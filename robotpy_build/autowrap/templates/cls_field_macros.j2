{# 
    Class properties
#}

{%- macro genprop(qualname, prop) -%}
  {%- if prop.array_size is defined -%}
    .def_property_readonly("{{ prop.x_name }}", []({{ qualname }}& inst) {
        return py::memoryview(py::buffer_info(
          &inst.{{ prop.name }}, sizeof({{ prop.type }}),
          py::format_descriptor<{{ prop.type }}>::format(),
          1, {{ "{" }}{{ prop.array_size }}{{ "}" }}, {sizeof({{ prop.type }})}
        ));
    }
    {{- doc(prop, ', py::doc(', ')') }})
  {%- elif prop.array -%}
    .def_property("{{ prop.x_name }}",
      [](const {{ qualname }}& inst) { return inst.{{ prop.name}}; },
      []({{ qualname }}& inst, const {{ prop.type }} v) {inst.{{ prop.name}} = v; }
      {{- doc(prop, ', py::doc(', ')') }})
  {%- elif prop.reference -%}
    .def_property
    {%- if prop.constant or prop.constexpr or prop.x_readonly -%}
        _readonly
    {%- endif -%}
    ("{{ prop.x_name }}", {{ ' ' }}
        [](const {{ qualname }}& inst) -> {{ prop.type }} { return inst.{{ prop.name}}; }
        {%- if not (prop.constant or prop.constexpr or prop.x_readonly) %},
        []({{ qualname }}& inst, {{ prop.type }} v) {inst.{{ prop.name}} = v; }
        {%- endif -%}
        {{- doc(prop, ', py::doc(', ')') }}
    )

  {%- else -%}
    .def_
      {%- if prop.constant or prop.constexpr or prop.x_readonly -%}
        readonly
      {%- else -%}
        readwrite
      {%- endif -%}
      {%- if prop.static %}_static{% endif -%}
      ("{{ prop.x_name }}", &{{ qualname }}::{{ prop.name}}
      {{- doc(prop, ', py::doc(', ')') }})
  {%- endif -%}
{%- endmacro -%}