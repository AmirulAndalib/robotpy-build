{#
    Macros for binding things with pybind11
#}






{%- macro cls_using(cls) -%}
  {% if cls.parent and '<' not in cls.x_qualname %}
  using {{ cls.name }} = {{ cls.x_qualname }};
  {% endif %}
  {% for typealias in cls.data.typealias -%}
    using {% if '=' in typealias %}{{ typealias }}{% else %}{{ typealias.split('::')[-1] }} = {{ typealias }}{% endif %};
  {% endfor %}
  {% for constant in cls.data.constants -%}
    static constexpr auto {{ constant.split('::')[-1] }} = {{ constant }};
  {% endfor %}
{% endmacro -%}



{%- macro cls_init(cls, name) -%}
    {{ cls.x_varname }}(

    {%- if cls.parent -%}
      {{ cls.parent.x_varname }}
    {%- elif cls.data.template_params -%}
      m
    {%- else -%}
      {{ cls.x_module_var }}
    {%- endif -%}
    , {{ name }}
    
    {%- if cls.final -%}
      , py::is_final()
    {%- endif -%}

    ),

  {% for enum in cls.enums.public if "name" in enum and not enum.data.ignore %}
    {{ enum_init_args(enum) }},
  {% endfor %}

  {# recurse #}
  {% for ncls in cls.nested_classes
     if not ncls.data.ignore and ncls.template is not defined %}
    {{ cls_init(ncls, '"' + ncls.x_name + '"') }}
  {% endfor -%}

{%- endmacro -%}

{%- macro cls_def(cls, varname) -%}

  {% for enum in cls.enums.public if "name" in enum and not enum.data.ignore %}
    {{ cls.x_varname }}_enum{{ loop.index }}{{ enum_def(enum) }}
  {% endfor %}

  {{ doc(cls, varname + '.doc() =', ';') }}

  {{ varname }}
  {# default constructor if not defined #}
  {% if not cls.x_has_constructor and not cls.data.nodelete and not cls.data.force_no_default_constructor %}
    .def(py::init<>(), release_gil())
  {% endif -%}
  {%- for fn in cls.methods.public if not fn.data.ignore and not fn.data.ignore_pure %}
    {{ genmethod(cls.x_qualname, fn, None) }}
  {% endfor -%}

  {%- if cls.x_has_trampoline -%}
  {%- for fn in cls.methods.protected if not fn.data.ignore and not fn.data.ignore_pure %}
    {{ genmethod(cls.x_qualname, fn, cls.x_trampoline_name) }}
  {% endfor -%}
  {%- endif -%}

  {%- for prop in cls.properties.public if not prop.data.ignore %}
    {{ genprop(cls.x_qualname, prop) }}
  {% endfor -%}
  {%- for prop in cls.properties.protected if not prop.data.ignore %}
    {{ genprop(cls.x_trampoline_name, prop) }}
  {%- endfor %};

  {{ unnamed_enum(varname, cls.enums.public) }}

  {#- recurse -#}
  {%- for ncls in cls.nested_classes 
      if not ncls.data.ignore and ncls.template is not defined %}
  {{ cls_def(ncls, ncls.x_varname) }}
  {% endfor -%}

{%- endmacro -%}
